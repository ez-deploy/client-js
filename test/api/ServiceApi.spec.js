/*
 * ez-deploy apiserver.
 * apiserver
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.27
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.EzDeployApiserver);
  }
}(this, function(expect, EzDeployApiserver) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new EzDeployApiserver.ServiceApi();
  });

  describe('(package)', function() {
    describe('ServiceApi', function() {
      describe('createService', function() {
        it('should call createService successfully', function(done) {
          // TODO: uncomment, update parameter values for createService call and complete the assertions
          /*
          var body = new EzDeployApiserver.ServiceInfo();
          body.id = 1;
          body.projectId = 1;
          body.running = false;
          body.versionId = 1;
          body.name = "foobar";
          body.description = "foobar service";
          body.replica = 16;
          body.exposeType = "service";
          body.inClusterPort = 80;
          body.nodePort = 80;
          body.createAt = 1528894200;
          body.updateAt = 1528894200;

          instance.createService(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(EzDeployApiserver.ServiceInfo);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(1);
            expect(data.projectId).to.be.a('number');
            expect(data.projectId).to.be(1);
            expect(data.running).to.be.a('boolean');
            expect(data.running).to.be(false);
            expect(data.versionId).to.be.a('number');
            expect(data.versionId).to.be(1);
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("foobar");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("foobar service");
            expect(data.replica).to.be.a('number');
            expect(data.replica).to.be(16);
            expect(data.exposeType).to.be.a('string');
            expect(data.exposeType).to.be("service");
            expect(data.inClusterPort).to.be.a('number');
            expect(data.inClusterPort).to.be(80);
            expect(data.nodePort).to.be.a('number');
            expect(data.nodePort).to.be(80);
            expect(data.createAt).to.be.a('number');
            expect(data.createAt).to.be(1528894200);
            expect(data.updateAt).to.be.a('number');
            expect(data.updateAt).to.be(1528894200);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createServiceVersion', function() {
        it('should call createServiceVersion successfully', function(done) {
          // TODO: uncomment, update parameter values for createServiceVersion call and complete the assertions
          /*
          var body = new EzDeployApiserver.ServiceVersion();
          body.id = 1;
          body.serviceId = 1;
          body.containerPort = 80;
          body.image = "busybox:latest";
          body.name = "foobar";
          body.description = "foobar version";
          body.createAt = 1528894200;

          instance.createServiceVersion(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(EzDeployApiserver.ServiceVersion);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(1);
            expect(data.serviceId).to.be.a('number');
            expect(data.serviceId).to.be(1);
            expect(data.containerPort).to.be.a('number');
            expect(data.containerPort).to.be(80);
            expect(data.image).to.be.a('string');
            expect(data.image).to.be("busybox:latest");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("foobar");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("foobar version");
            expect(data.createAt).to.be.a('number');
            expect(data.createAt).to.be(1528894200);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteService', function() {
        it('should call deleteService successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteService call and complete the assertions
          /*
          var id = 56;

          instance.deleteService(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(EzDeployApiserver.ServiceInfo);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(1);
            expect(data.projectId).to.be.a('number');
            expect(data.projectId).to.be(1);
            expect(data.running).to.be.a('boolean');
            expect(data.running).to.be(false);
            expect(data.versionId).to.be.a('number');
            expect(data.versionId).to.be(1);
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("foobar");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("foobar service");
            expect(data.replica).to.be.a('number');
            expect(data.replica).to.be(16);
            expect(data.exposeType).to.be.a('string');
            expect(data.exposeType).to.be("service");
            expect(data.inClusterPort).to.be.a('number');
            expect(data.inClusterPort).to.be(80);
            expect(data.nodePort).to.be.a('number');
            expect(data.nodePort).to.be(80);
            expect(data.createAt).to.be.a('number');
            expect(data.createAt).to.be(1528894200);
            expect(data.updateAt).to.be.a('number');
            expect(data.updateAt).to.be(1528894200);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getServiceVersion', function() {
        it('should call getServiceVersion successfully', function(done) {
          // TODO: uncomment, update parameter values for getServiceVersion call and complete the assertions
          /*
          var serviceId = 56;
          var versionId = 56;

          instance.getServiceVersion(serviceId, versionId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(EzDeployApiserver.ServiceVersion);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(1);
            expect(data.serviceId).to.be.a('number');
            expect(data.serviceId).to.be(1);
            expect(data.containerPort).to.be.a('number');
            expect(data.containerPort).to.be(80);
            expect(data.image).to.be.a('string');
            expect(data.image).to.be("busybox:latest");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("foobar");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("foobar version");
            expect(data.createAt).to.be.a('number');
            expect(data.createAt).to.be(1528894200);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('listService', function() {
        it('should call listService successfully', function(done) {
          // TODO: uncomment, update parameter values for listService call and complete the assertions
          /*
          var opts = {};
          opts.projectId = 56;
          opts.serviceId = 56;
          opts.serviceName = "serviceName_example";

          instance.listService(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('listServicePod', function() {
        it('should call listServicePod successfully', function(done) {
          // TODO: uncomment, update parameter values for listServicePod call and complete the assertions
          /*
          var serviceId = 56;

          instance.listServicePod(serviceId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('listServiceVersion', function() {
        it('should call listServiceVersion successfully', function(done) {
          // TODO: uncomment, update parameter values for listServiceVersion call and complete the assertions
          /*
          var serviceId = 56;

          instance.listServiceVersion(serviceId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateServiceDescription', function() {
        it('should call updateServiceDescription successfully', function(done) {
          // TODO: uncomment, update parameter values for updateServiceDescription call and complete the assertions
          /*
          var body = new EzDeployApiserver.ServiceInfo();
          body.id = 1;
          body.projectId = 1;
          body.running = false;
          body.versionId = 1;
          body.name = "foobar";
          body.description = "foobar service";
          body.replica = 16;
          body.exposeType = "service";
          body.inClusterPort = 80;
          body.nodePort = 80;
          body.createAt = 1528894200;
          body.updateAt = 1528894200;

          instance.updateServiceDescription(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(EzDeployApiserver.ServiceInfo);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(1);
            expect(data.projectId).to.be.a('number');
            expect(data.projectId).to.be(1);
            expect(data.running).to.be.a('boolean');
            expect(data.running).to.be(false);
            expect(data.versionId).to.be.a('number');
            expect(data.versionId).to.be(1);
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("foobar");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("foobar service");
            expect(data.replica).to.be.a('number');
            expect(data.replica).to.be(16);
            expect(data.exposeType).to.be.a('string');
            expect(data.exposeType).to.be("service");
            expect(data.inClusterPort).to.be.a('number');
            expect(data.inClusterPort).to.be(80);
            expect(data.nodePort).to.be.a('number');
            expect(data.nodePort).to.be(80);
            expect(data.createAt).to.be.a('number');
            expect(data.createAt).to.be(1528894200);
            expect(data.updateAt).to.be.a('number');
            expect(data.updateAt).to.be(1528894200);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateServiceVersion', function() {
        it('should call updateServiceVersion successfully', function(done) {
          // TODO: uncomment, update parameter values for updateServiceVersion call and complete the assertions
          /*
          var body = new EzDeployApiserver.ServiceInfo();
          body.id = 1;
          body.projectId = 1;
          body.running = false;
          body.versionId = 1;
          body.name = "foobar";
          body.description = "foobar service";
          body.replica = 16;
          body.exposeType = "service";
          body.inClusterPort = 80;
          body.nodePort = 80;
          body.createAt = 1528894200;
          body.updateAt = 1528894200;

          instance.updateServiceVersion(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(EzDeployApiserver.ServiceInfo);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(1);
            expect(data.projectId).to.be.a('number');
            expect(data.projectId).to.be(1);
            expect(data.running).to.be.a('boolean');
            expect(data.running).to.be(false);
            expect(data.versionId).to.be.a('number');
            expect(data.versionId).to.be(1);
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("foobar");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("foobar service");
            expect(data.replica).to.be.a('number');
            expect(data.replica).to.be(16);
            expect(data.exposeType).to.be.a('string');
            expect(data.exposeType).to.be("service");
            expect(data.inClusterPort).to.be.a('number');
            expect(data.inClusterPort).to.be(80);
            expect(data.nodePort).to.be.a('number');
            expect(data.nodePort).to.be(80);
            expect(data.createAt).to.be.a('number');
            expect(data.createAt).to.be(1528894200);
            expect(data.updateAt).to.be.a('number');
            expect(data.updateAt).to.be(1528894200);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
