/*
 * ez-deploy apiserver.
 * apiserver
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.27
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.EzDeployApiserver);
  }
}(this, function(expect, EzDeployApiserver) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new EzDeployApiserver.RBACApi();
  });

  describe('(package)', function() {
    describe('RBACApi', function() {
      describe('getProjectRBAC', function() {
        it('should call getProjectRBAC successfully', function(done) {
          // TODO: uncomment, update parameter values for getProjectRBAC call and complete the assertions
          /*
          var id = 56;

          instance.getProjectRBAC(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(EzDeployApiserver.ProjectRole);
            expect(data.projectId).to.be.a('number');
            expect(data.projectId).to.be(1);
            {
              let dataCtr = data.roles;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(EzDeployApiserver.RoleView);
                expect(data.info).to.be.a(EzDeployApiserver.RoleInfo);
                      expect(data.info.id).to.be.a('number');
                  expect(data.info.id).to.be(1);
                  expect(data.info.projectId).to.be.a('number');
                  expect(data.info.projectId).to.be(1);
                  expect(data.info.role).to.be.a('string');
                  expect(data.info.role).to.be("admin");
                {
                  let dataCtr = data.permissions;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(EzDeployApiserver.RolePermission);
                    expect(data.id).to.be.a('number');
                    expect(data.id).to.be(1);
                    expect(data.roleId).to.be.a('number');
                    expect(data.roleId).to.be(1);
                    expect(data.permission).to.be.a('string');
                    expect(data.permission).to.be("read");
    
                          }
                }
                {
                  let dataCtr = data.members;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(EzDeployApiserver.RoleMember);
                    expect(data.id).to.be.a('number');
                    expect(data.id).to.be(1);
                    expect(data.roleId).to.be.a('number');
                    expect(data.roleId).to.be(1);
                    expect(data.userId).to.be.a('number');
                    expect(data.userId).to.be(1);
    
                          }
                }

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getUserRBAC', function() {
        it('should call getUserRBAC successfully', function(done) {
          // TODO: uncomment getUserRBAC call and complete the assertions
          /*

          instance.getUserRBAC(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(EzDeployApiserver.UserRole);
            expect(data.userId).to.be.a('number');
            expect(data.userId).to.be(1);
            {
              let dataCtr = data.roles;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(EzDeployApiserver.RoleView);
                expect(data.info).to.be.a(EzDeployApiserver.RoleInfo);
                      expect(data.info.id).to.be.a('number');
                  expect(data.info.id).to.be(1);
                  expect(data.info.projectId).to.be.a('number');
                  expect(data.info.projectId).to.be(1);
                  expect(data.info.role).to.be.a('string');
                  expect(data.info.role).to.be("admin");
                {
                  let dataCtr = data.permissions;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(EzDeployApiserver.RolePermission);
                    expect(data.id).to.be.a('number');
                    expect(data.id).to.be(1);
                    expect(data.roleId).to.be.a('number');
                    expect(data.roleId).to.be(1);
                    expect(data.permission).to.be.a('string');
                    expect(data.permission).to.be("read");
    
                          }
                }
                {
                  let dataCtr = data.members;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(EzDeployApiserver.RoleMember);
                    expect(data.id).to.be.a('number');
                    expect(data.id).to.be(1);
                    expect(data.roleId).to.be.a('number');
                    expect(data.roleId).to.be(1);
                    expect(data.userId).to.be.a('number');
                    expect(data.userId).to.be(1);
    
                          }
                }

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
