/*
 * ez-deploy apiserver.
 * apiserver
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.27
 *
 * Do not edit the class manually.
 *
 */

(function(factory) {
  if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('./ApiClient'), require('./model/AuthInfo'), require('./model/EnvironmentVariable'), require('./model/Error'), require('./model/PodInfo'), require('./model/ProjectInfo'), require('./model/ProjectRole'), require('./model/RoleInfo'), require('./model/RoleMember'), require('./model/RolePermission'), require('./model/RoleView'), require('./model/ServiceInfo'), require('./model/ServiceVersion'), require('./model/Token'), require('./model/UserInfo'), require('./model/UserRole'), require('./api/IdentityApi'), require('./api/ProjectApi'), require('./api/RBACApi'), require('./api/ServiceApi'));
  }
}(function(ApiClient, AuthInfo, EnvironmentVariable, Error, PodInfo, ProjectInfo, ProjectRole, RoleInfo, RoleMember, RolePermission, RoleView, ServiceInfo, ServiceVersion, Token, UserInfo, UserRole, IdentityApi, ProjectApi, RBACApi, ServiceApi) {
  'use strict';

  /**
   * apiserver.<br>
   * The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
   * <p>
   * An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
   * <pre>
   * var EzDeployApiserver = require('index'); // See note below*.
   * var xxxSvc = new EzDeployApiserver.XxxApi(); // Allocate the API class we're going to use.
   * var yyyModel = new EzDeployApiserver.Yyy(); // Construct a model instance.
   * yyyModel.someProperty = 'someValue';
   * ...
   * var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
   * ...
   * </pre>
   * <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
   * and put the application logic within the callback function.</em>
   * </p>
   * <p>
   * A non-AMD browser application (discouraged) might do something like this:
   * <pre>
   * var xxxSvc = new EzDeployApiserver.XxxApi(); // Allocate the API class we're going to use.
   * var yyy = new EzDeployApiserver.Yyy(); // Construct a model instance.
   * yyyModel.someProperty = 'someValue';
   * ...
   * var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
   * ...
   * </pre>
   * </p>
   * @module index
   * @version 1.0.0
   */
  var exports = {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient: ApiClient,
    /**
     * The AuthInfo model constructor.
     * @property {module:model/AuthInfo}
     */
    AuthInfo: AuthInfo,
    /**
     * The EnvironmentVariable model constructor.
     * @property {module:model/EnvironmentVariable}
     */
    EnvironmentVariable: EnvironmentVariable,
    /**
     * The Error model constructor.
     * @property {module:model/Error}
     */
    Error: Error,
    /**
     * The PodInfo model constructor.
     * @property {module:model/PodInfo}
     */
    PodInfo: PodInfo,
    /**
     * The ProjectInfo model constructor.
     * @property {module:model/ProjectInfo}
     */
    ProjectInfo: ProjectInfo,
    /**
     * The ProjectRole model constructor.
     * @property {module:model/ProjectRole}
     */
    ProjectRole: ProjectRole,
    /**
     * The RoleInfo model constructor.
     * @property {module:model/RoleInfo}
     */
    RoleInfo: RoleInfo,
    /**
     * The RoleMember model constructor.
     * @property {module:model/RoleMember}
     */
    RoleMember: RoleMember,
    /**
     * The RolePermission model constructor.
     * @property {module:model/RolePermission}
     */
    RolePermission: RolePermission,
    /**
     * The RoleView model constructor.
     * @property {module:model/RoleView}
     */
    RoleView: RoleView,
    /**
     * The ServiceInfo model constructor.
     * @property {module:model/ServiceInfo}
     */
    ServiceInfo: ServiceInfo,
    /**
     * The ServiceVersion model constructor.
     * @property {module:model/ServiceVersion}
     */
    ServiceVersion: ServiceVersion,
    /**
     * The Token model constructor.
     * @property {module:model/Token}
     */
    Token: Token,
    /**
     * The UserInfo model constructor.
     * @property {module:model/UserInfo}
     */
    UserInfo: UserInfo,
    /**
     * The UserRole model constructor.
     * @property {module:model/UserRole}
     */
    UserRole: UserRole,
    /**
     * The IdentityApi service constructor.
     * @property {module:api/IdentityApi}
     */
    IdentityApi: IdentityApi,
    /**
     * The ProjectApi service constructor.
     * @property {module:api/ProjectApi}
     */
    ProjectApi: ProjectApi,
    /**
     * The RBACApi service constructor.
     * @property {module:api/RBACApi}
     */
    RBACApi: RBACApi,
    /**
     * The ServiceApi service constructor.
     * @property {module:api/ServiceApi}
     */
    ServiceApi: ServiceApi
  };

  return exports;
}));
